import numpy as np

class SIS_TEP:
    """
    Class to read a time-evolution profile (TEP) file for the SIS model.
    The TEP file should be a numpy binary file containing a 2D array with the following columns:
    1. Time points
    2. Vertex indices
    The vertex indices should be 1-based.
    The teps generated by generate_tep.jl without optional `--dt` are in this format.
    """
    def __init__(self, filename):
        self.filename = filename
        self.data = np.load(filename)
        self.time_points = self.data[:, 0]
        self.vertex_indices = self.data[:, 1].astype(int) - 1
        self.N_vertices = max(self.vertex_indices) + 1
        self.max_T = self.time_points[-1]

    def __call__(self, t):
        """
        Returns the state of the system at time t.
        """
        if t < 0:
            raise ValueError("t must be non-negative.")
        idx = np.searchsorted(self.time_points, t, side='right')
        return np.array([np.count_nonzero(self.vertex_indices[:idx+1] == v) % 2 for v in range(self.N_vertices)])

    def sample_with_dt(self, dt):
        """
        Samples the TEP with a time step dt.
        """
        return np.array([self(t) for t in np.arange(0, self.max_T + dt, dt)])

    def sample_at_ts(self, ts):
        """
        Samples the TEP at time points ts.
        """
        return np.array([self(t) for t in ts])

    def sample(self, t):
        """
        Generate a TEP at time points ts (if ts is an array) or with a time step dt (if t is a number).
        """
        if isinstance(t, float):
            return self.sample_with_dt(t)
        else:
            return self.sample_at_ts(t)
